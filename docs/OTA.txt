[11.12.20]Таск 1 - подготовка
Эти два алгоритма - оба упрощенные. Детализация будет, когда будем перечислять классы и методы
Алгоритм прошивки(упрощенный)
1. Обновляем прошивку на сервере
2. Плата проверяет наличие обновления
   и если надо, обновляется
3. Приложение проверяет состояние
   и текущую версию
Алгоритм прошивки(детальный)
---------------------
Стадия 1 - подготовка прошивки
1. Залить прошивку на сервер
2. Подтвердить новую версию
3. Сохранить старую прошивку
4. Удалить старую прошивку
---------------------
Стадия 2 - "плата слушает"
1. Запрос на сервер
   1. Прошивка старая?
   Да: игнорируем  |Можно реализовать
   Нет: пункт 2    |с помощью статус кодов
2. Скачивание прошивки (на плату)
3. Удаление старой прошивки
   3.1 Удаление старой и одновременное 
       записывание новой прошивки
               (или)
   3.2 Удаление старой и после, записывание
       новой
4. Перезапуск платы
---------------------
Стадия 3 - проверка
1. Приложение проверяет подключена ли плата
2. Приложение проверяет прошивку платы
   2.1 Плата обновлена: ура!
   2.2 Плата не обновлена, но есть обновление
   2.3 Нет обновления
--------------------
Важное примечание*
У нас несколько вариантов обновления
Они отличаются в основном, либо клиентом
(принимающей) стороной и сервром(отправляющей),
либо связующим звеном. Тип сервера не важен, при условии,
что его ответ иммутабелен.
?   - Запрос, есть ли обновление
->  - Ответ + отправка прошивки
<->  - Запрос с ожданием прошивки
1. Плата ? Сервер -> Плата 
2. Приложение ? Сервер -> Приложение -> Плата
3. Плата <-> Приложение <-> Сервер 
---------------------------------------------------------------
[15.12.2020]Таск 1-2 Подготовка
Исходя из: https://www.terraelectronica.ru/news/6312
"ESP32 поддерживает возможность безопасного OTA обновления встроенной прошивки при использовании Amazon FreeRTOS."
Что такое Amazon FreeRTOS можно почитать здесь: https://aws.amazon.com/ru/freertos/
 - - - - - - - - - - - - ЧАСТЬ 1: Подготовка AmazonWBS и FreeRTOS
1. Безопасное развертывание и проверка целлостности прошивки
2. Обновление можно настроить как для отдельного контроллера, так и для целой группы
   Не смотря на то , что амазон рекомендует 
   https://www.terraelectronica.ru/catalog/sredstva-razrabotki-i-otladki-dlya-besprovodnyh-sistem-peredachi-dannyh-792?text=ESP32-DevKitC&search=ESP32-DevKitC
   EPS32-DevKit , наша плата подойдет , так как она тоже ESP32
3. (Для трелло)Создадим учетку в WebServices  и IAM : 
   WBS - https://aws.amazon.com/ru/premiumsupport/knowledge-center/create-and-activate-aws-account/
   IAM - https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html
   Тут все просто. IAM - позволяет разными способами контроллировать разные Amazon WBS сервисы.
   Если еще грубее, эти инструменты делают почти всю выше перечисленную (в предидущем ресерче) работу. 
4. Если нам потребуется отладочная плата, необходимо установить набор разработчика ESP-IDF
   Если мы решим добавлять отладочные инструменты, необходимо акцентировать внимание на версиях
   компилятора из-за его не совместимости с некоторыми наборами разных версий ESP-IDF
5. (Для трелло) Загрузка и настройка FreeRTOS 
   Скачать можно из репозитория : https://github.com/aws/amazon-freertos
   Или коммандной строки https://console.aws.amazon.com/freertos
6. (Для трелло)Подготовка к сборке демо приложения для понимания настройки:
   6.1 Установим AWS(CLI) https://docs.aws.amazon.com/cli/latest/userguide/installing.html
   6.2 Коммадна aws configure и дальше следуем инструкции: https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html
   6.3 Установим AWS SDK для Python (boto3): `pip3 install tornado nose --user`,`pip3 install boto3 --user`
7. (Для трелло)Конфигурируем /tools/aws_config_quick_start/configure.json
   7.1
   00|afr_source_dir - Полный путь к каталогу amazon-freertos на ПК с которого и происходит настройка
   01|thing_name     - Имя платы в AWS IoT.
   02|wifi_ssid      - SSID сети Wi-Fi.
   03|wifi_password  - Пароль для сети Wi-Fi.
   04|wifi_security  - Настройка безопасности для сети Wi-Fi.
   * В параметре wifi_security на строке 04 могут быть такие аргументы:
     eWiFiSecurityOpen (Открытая сеть)
     eWiFiSecurityWEP (WEP)
     eWiFiSecurityWPA (WPA)
     eWiFiSecurityWPA2 (WPA2)
   7.3 Конфигурация: `python3 SetupAWS.py setup`
8. (Для трелло)Сборка демо приложения и прошивка
   P.S: раздел с windows я пропустил.
   Инструменты, которые нам нужны: Make,CMake,Esspressif IDF
   `cmake -DVENDOR=espressif -DBOARD=esp32_wrover_kit -DCOMPILER=xtensa-esp32 \-GNinja -S. -B your-build-directory`
   `cmake --build your-build-directory`
9. (Для трелло)Прошивка и запуск Amazon FreeRTOS
   ./vendors/espressif/esp-idf/tools/idf.py erase_flash -B build
   ./vendors/espressif/esp-idf/tools/idf.py flash -B build
   для отслеживания: ./vendors/espressif/esp-idf/tools/idf.py monitor -p /dev/ttyUSB1 -B build

